name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
          ECR_FRONTEND_REPO: ${{ secrets.ECR_FRONTEND_REPO }}
        run: |
          docker build -t "$ECR_FRONTEND_REPO:latest" ./webapp
          docker push "$ECR_FRONTEND_REPO:latest"

      - name: Update frontend ECS task definition
        env:
          FRONTEND_TASK: ${{ secrets.FRONTEND_TASK }}
          ECR_FRONTEND_REPO: ${{ secrets.ECR_FRONTEND_REPO }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          FRONTEND_SERVICE: ${{ secrets.FRONTEND_SERVICE }}
        run: |
          aws ecs describe-task-definition --task-definition "$FRONTEND_TASK" > task-def.json
          cat task-def.json | jq \
            --arg IMAGE "$ECR_FRONTEND_REPO:latest" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE |
             {family: .taskDefinition.family,
              executionRoleArn: .taskDefinition.executionRoleArn,
              networkMode: .taskDefinition.networkMode,
              containerDefinitions: .taskDefinition.containerDefinitions,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory}' > frontend-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://frontend-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$FRONTEND_SERVICE" \
            --task-definition "$NEW_TASK_DEF_ARN" \
            --force-new-deployment

  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        env:
          ECR_BACKEND_REPO: ${{ secrets.ECR_BACKEND_REPO }}
        run: |
          docker build -t "$ECR_BACKEND_REPO:latest" ./api
          docker push "$ECR_BACKEND_REPO:latest"

      - name: Update backend ECS task definition
        env:
          BACKEND_TASK: ${{ secrets.BACKEND_TASK }}
          ECR_BACKEND_REPO: ${{ secrets.ECR_BACKEND_REPO }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          BACKEND_SERVICE: ${{ secrets.BACKEND_SERVICE }}
        run: |
          aws ecs describe-task-definition --task-definition "$BACKEND_TASK" > task-def.json
          cat task-def.json | jq \
            --arg IMAGE "$ECR_BACKEND_REPO:latest" \
            '.taskDefinition.containerDefinitions[0].image = $IMAGE |
             {family: .taskDefinition.family,
              executionRoleArn: .taskDefinition.executionRoleArn,
              networkMode: .taskDefinition.networkMode,
              containerDefinitions: .taskDefinition.containerDefinitions,
              requiresCompatibilities: .taskDefinition.requiresCompatibilities,
              cpu: .taskDefinition.cpu,
              memory: .taskDefinition.memory}' > backend-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://backend-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$BACKEND_SERVICE" \
            --task-definition "$NEW_TASK_DEF_ARN" \
            --force-new-deployment
